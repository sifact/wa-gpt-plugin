const E=new Set;let N=!1,M=null;const o={isAttemptingDelivery:N,currentResponseToDeliver:M},L=`
  position: fixed;
  bottom: 120px;
  right: 30px;
  background-color: #25D366; /* WhatsApp green */
  color: white;
  border: none;
  border-radius: 4px;
  padding: 8px 16px;
  font-size: 14px;
  font-weight: bold;
  cursor: pointer;
  z-index: 9999;
  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
`;function A(){console.log("Content.js: Clearing visual markers from processed conversations"),document.querySelectorAll(".chatgpt-pending-response").forEach(n=>{console.log("Content.js: Clearing visual pending marker from element:",n.getAttribute("data-chatgpt-conversation-id")),n.classList.remove("chatgpt-pending-response")})}function U(){const t=document.getElementById("meta-suite-next-button");t&&t.remove();const n=document.createElement("button");n.id="meta-suite-next-button",n.textContent="Next",n.style.cssText=L,n.addEventListener("click",()=>{y(!0),console.log("Content.js: Next button clicked. Set isPartialChecking to true."),A(),o.currentResponseToDeliver&&(o.currentResponseToDeliver=null),o.isAttemptingDelivery=!1,setTimeout(v,500),n.textContent="Scanning...",setTimeout(()=>{n.textContent="Next"},1500)}),document.body.appendChild(n),console.log("Content.js: Added 'Next' button to the page.")}function D(t){var e,l;const n=`${t.conversationId}:${(l=(e=t.originalQuestionText)==null?void 0:e.trim())==null?void 0:l.slice(0,50)}`;I.processedMessages.add(n)}async function S(t){try{t.click(),await new Promise(n=>setTimeout(n,100)),t.dispatchEvent(new MouseEvent("mousedown",{bubbles:!0})),await new Promise(n=>setTimeout(n,50)),t.dispatchEvent(new MouseEvent("mouseup",{bubbles:!0})),await new Promise(n=>setTimeout(n,50)),t.dispatchEvent(new MouseEvent("click",{bubbles:!0})),t.focus(),await new Promise(n=>setTimeout(n,50)),t.click()}catch(n){console.error("Click attempt failed:",n)}}async function _(t,n,e,l,d){try{t.focus();const g=new InputEvent("beforeinput",{bubbles:!0,cancelable:!0,inputType:"insertText",data:n});t.dispatchEvent(g);const s=document.createElement("p");s.className="selectable-text copyable-text x15bjb6t x1n2onr6",s.dir="ltr",s.style.textIndent="0px",s.style.marginTop="0px",s.style.marginBottom="0px";const r=document.createElement("span");if(r.className="selectable-text copyable-text false",r.setAttribute("data-lexical-text","true"),r.textContent=n,s.appendChild(r),t.textContent="",t.appendChild(s),t.dispatchEvent(new Event("input",{bubbles:!0,cancelable:!0})),await new Promise(a=>setTimeout(a,500)),e)return y(!1),U(),o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1,D(deliveryJob),!0;if(l){const a=document.querySelector('button[aria-label="Send"]');return a&&(console.log("Clicking send button"),a.click(),y(!0),d.click()),!0}else return o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1,!0}catch(g){return console.error("Error setting draft:",g),!1}}const F=new Set,I={processedMessages:F};async function B(){var l;const t=[],n=document.querySelectorAll('div[role="listitem"] ._ahlk');if(console.log(`Content.js: Found ${n.length} unread chats.`),n.length===0)return t;for(const d of n){let g="Unknown Sender",s="",r=null,a=null;try{let j=function(C){let m=0;for(let w=0;w<C.length;w++)m=(m<<5)-m+C.charCodeAt(w),m|=0;return Math.abs(m).toString().substring(0,10)};var e=j;const u=d.closest('div[role="listitem"]');if(!u)continue;const i=u.querySelector("div._ak72");if(!i)continue;if(i.querySelector('span[data-icon="status-dblcheck"] svg')||i.querySelector("div.x78zum5.x1okw0bk.x1ozewix.x16dsc37.x1xp8n7a.xl56j7k.xfs2ol5")){console.log("Content.js: Message already read, skipping");const C=[u.querySelector('div[role="gridcell"]'),u.querySelector('div[tabindex="-1"]'),u.querySelector("div._ak8q"),u.querySelector("div._ak8j"),i].filter(Boolean);for(const m of C)await S(m);continue}else console.log("No SVG found, message is unread");const f=i.querySelector("div.x78zum5 span.x1iyjqo2");f&&(g=f.textContent.trim());const x=i.querySelector("div._ak8k span.x1iyjqo2");if(!x||(s=x.textContent.trim(),s==="typingâ€¦"))continue;if(s.toLowerCase().startsWith("you:")||s.toLowerCase().startsWith("you: ")){console.log("Content.js: Message starts with 'You:', skipping");continue}r=j(g),a=r;const k=`${a}:${(l=s==null?void 0:s.trim())==null?void 0:l.slice(0,50)}`;if(I.processedMessages.has(k)){console.log(`Content.js: Message already processed, skipping: ${k}`);continue}u.setAttribute("data-chatgpt-conversation-id",a),t.push({id:`q-${a}`,text:s,sender:g,conversationId:a,phoneNumber:r,previewElement:u}),console.log(`Content.js: Sender "${g}": Successfully extracted UNREAD question: "${s}" (Conv ID: ${a}). Added to processing queue.`),u.classList.add("chatgpt-pending-response"),u.setAttribute("data-chatgpt-processing-time",Date.now().toString())}catch(u){console.error("Content.js: Error processing a conversation:",u)}}return t.length===0&&console.log("Content.js: No new, unread messages."),t}const b=2;async function O(t){if(t.length!==0){if(console.log(`Content.js: Processing ${t.length} questions with delay between each`),window.isPartialAutomationEnabled&&!z()){console.log("Content.js: In partial mode with isPartialChecking=false. Skipping question processing to prevent multiple triggers.");return}for(let n=0;n<t.length;n++){const e=t[n];n>0&&await new Promise(d=>setTimeout(d,15e3));let l;e.conversationId&&!e.conversationId.startsWith("new-convo-")?l=e.conversationId+"||"+e.text:l=e.sender+"||"+e.text;try{if(E.has(l)){console.log('Skipping as it previously resulted in "NOTFOUND"'),e.previewElement&&e.previewElement.classList.contains("chatgpt-pending-response")&&e.previewElement.classList.remove("chatgpt-pending-response");continue}if(console.log(`Content.js: Sending question to background: "${e.text}" (Sender: ${e.sender}, Conv ID: ${e.conversationId})`),e.previewElement&&(e.previewElement.classList.add("chatgpt-pending-response"),console.log(`Content.js: Marked conversation ${e.conversationId} as 'chatgpt-pending-response'.`)),chrome.runtime.lastError){console.error("Content.js: Error in sendQuestionsToBackground:",chrome.runtime.lastError.message),e.previewElement&&e.previewElement.classList.remove("chatgpt-pending-response");continue}const d=`Customer-id-${e.conversationId}
Question: `,g=Date.now().toString().slice(-6),s=d+e.text,r=await chrome.runtime.sendMessage({action:"getAnswerFromChatGPT",question:s,conversationId:e.conversationId,requestId:g});if(chrome.runtime.lastError){console.error("Content.js: Error sending message to background (getAnswerFromChatGPT):",chrome.runtime.lastError.message),e.previewElement&&(e.previewElement.classList.remove("chatgpt-pending-response"),console.log(`Content.js: Unmarked conversation ${e.conversationId} from 'chatgpt-pending-response' due to send error.`));continue}if(r&&r.answer){if(console.log(`Content.js: Received answer for ${e.conversationId}: "${r.answer}"`),r.answer==="NOTFOUND"||r.answer.includes("NOTFOUND")){E.add(l),e.previewElement&&(e.previewElement.classList.remove("chatgpt-pending-response"),console.log(`Content.js: Unmarked ${e.conversationId} from pending due to "NOTFOUND".`)),o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1;continue}e.previewElement&&(e.previewElement.classList.remove("chatgpt-pending-response"),console.log(`Content.js: Unmarked ${e.conversationId} from pending, preparing for delivery.`)),o.currentResponseToDeliver={conversationId:e.conversationId,sender:e.sender,originalQuestionText:e.text,answer:r.answer,originalPreviewElement:e.previewElement,retries:0},q();break}else r&&r.error?(console.error(`Content.js: Error from background for question "${e.text}":`,r.error),r.error.includes("Another ChatGPT request is already in progress")?(console.log(`Content.js: Detected "Another ChatGPT request is already in progress" error for conversation ${e.conversationId}`),setTimeout(()=>{e.previewElement&&document.body.contains(e.previewElement)&&(e.previewElement.classList.remove("chatgpt-pending-response"),console.log(`Content.js: Removed 'chatgpt-pending-response' class from conversation ${e.conversationId} after timeout`))},1e4)):e.previewElement&&(e.previewElement.classList.remove("chatgpt-pending-response"),console.log(`Content.js: Unmarked conversation ${e.conversationId} from 'chatgpt-pending-response' due to ChatGPT error: ${r.error}`))):(console.log(`Content.js: No valid answer or error received from background for: "${e.text}"`),e.previewElement&&(e.previewElement.classList.remove("chatgpt-pending-response"),console.log(`Content.js: Unmarked conversation ${e.conversationId} from 'chatgpt-pending-response' due to no answer/error.`)))}catch(d){if(console.error(`Content.js: Error in sendQuestionsToBackground loop for question "${e.text}":`,d),d.message&&d.message.includes("Receiving end does not exist")){console.warn("Content.js: Extension context invalidated. Please reload the page.");break}}}}}async function q(){if(!o.currentResponseToDeliver){o.isAttemptingDelivery=!1;return}if(o.isAttemptingDelivery)return;o.isAttemptingDelivery=!0;const t=o.currentResponseToDeliver;let n=!1;try{let e=!1;const l=document.querySelectorAll('div[role="listitem"] ._ahlk');console.log("Found unread chats:",l.length);let d=null,g=!1,s=null,r=null,a=!1,u=null;for(const i of l)try{if(s=i.closest('div[role="listitem"]'),!s)continue;if(r=s.querySelector("div._ak72"),r){const c=r.querySelector("div.x78zum5 span.x1iyjqo2").textContent.trim();if(console.log(`Content.js: Checking conversation: "${c}"`),c&&c.trim()===t.sender.trim()){console.log(`Content.js: MATCH FOUND for "${t.sender}"`),d=i,g=!0;break}}}catch(c){console.error("Error checking conversation:",c)}if(g){console.log("chat found");try{const i=[s.querySelector('div[role="gridcell"]'),s.querySelector('div[tabindex="-1"]'),s.querySelector("div._ak8q"),s.querySelector("div._ak8j"),r].filter(Boolean);for(const c of i)await S(c),await new Promise(f=>setTimeout(f,200));e=!0}catch(i){console.error("Content.js: Delivery - Click failed:",i)}}else{console.log("chat not found"),t.retries=b,o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1,setTimeout(v,500);return}try{const i=document.querySelector('div[role="application"]');if(i){const c=i.querySelectorAll('div[role="row"]');if(c&&c.length>0)if(u=c[c.length-1],a=u.querySelector(".message-in")!==null,console.log(`Content.js: Delivery - Last message appears to be from ${a?"customer":"us"}`),a)console.log("Content.js: Delivery - Last message is from customer, proceeding with delivery.");else{console.warn("Content.js: Delivery - Aborting response as the last message is not from the customer but from us."),t.retries=b,o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1,setTimeout(v,500);return}else console.warn("Content.js: Delivery - Could not find message rows to check last message sender.")}else console.warn("Content.js: Delivery - Could not find message container.")}catch(i){console.error("Content.js: Delivery - Error checking last message sender:",i)}if(e){const i=document.querySelector('div.x1hx0egp.x6ikm8r.x1odjw0f.x1k6rcq7.x6prxxf[role="textbox"][aria-label="Type a message"]'),c=i;if(c){console.log("input box found...");const f=t.answer;n=await _(c,f,window.isPartialAutomationEnabled,a,i)}else console.warn("Content.js: Delivery - Message input field not found")}else console.warn(`Content.js: Delivery - Skipping input/send because click on conversation preview failed or element not found for ${t.conversationId}.`)}catch(e){console.error("Content.js: Delivery - Error during delivery attempt:",e),n=!1}if(n){try{D(t)}catch(e){console.log("messageKey did not added",e)}o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1,setTimeout(v,500)}else console.warn(`Content.js: Delivery attempt #${t.retries+1} failed for ${t.conversationId}.`),t.retries++,t.retries<b?(console.log(`Content.js: Scheduling retry for ${t.conversationId}.`),o.isAttemptingDelivery=!1,setTimeout(q,5e3)):(console.error("Content.js: Max retries reached."),o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1,setTimeout(v,500))}const T=5e3;let p=null,h=!0;function y(t){h=t,console.log(`Content.js: isPartialChecking set to ${t}`)}function z(){return h}async function v(){if(o.isAttemptingDelivery){console.log("Content.js: Automation cycle paused. A delivery attempt is already in progress (isAttemptingDelivery is true). Not scanning for new messages now.");return}const t=await chrome.runtime.sendMessage({action:"getSettings"});if(chrome.runtime.lastError){console.error("Content.js: Error getting settings in runAutomationCycle:",chrome.runtime.lastError.message);return}if(window.isPartialAutomationEnabled=t.isPartialAutomation===!0,window.isPartialAutomationEnabled&&console.log("Content.js: Partial Automation mode enabled. Responses will be placed in input box but not sent automatically."),window.isPartialAutomationEnabled&&!h){console.log("Content.js: Skipping conversation scanning because isPartialChecking is false while in Partial Automation mode.");return}else window.isPartialAutomationEnabled||(h=!0);if(o.currentResponseToDeliver){console.log("Content.js: Automation cycle paused. A response is already staged for delivery.");return}const n=document.querySelectorAll(".chatgpt-pending-response");if(n.length>0){console.log(`Content.js: Automation cycle paused. There are ${n.length} conversations with pending responses.`);return}if(t&&t.isEnabled){const e=await B();e.length>0?await O(e):E.size>0}}function P(){console.log("Content.js: Attempting to start automation with new logic..."),p&&(clearInterval(p),p=null),h=!0,console.log("Content.js: Reset isPartialChecking to true during automation start."),A(),v(),p=setInterval(v,T),console.log(`Content.js: Polling interval started with ID ${p} for every ${T}ms.`),console.log("Content.js: Relying solely on polling interval for message scanning.")}function $(){console.log("Content.js: Stopping automation."),p&&(clearInterval(p),console.log(`Content.js: Polling interval ${p} stopped.`),p=null),o.currentResponseToDeliver=null,o.isAttemptingDelivery=!1}function G(){o.currentResponseToDeliver&&(console.log(`Content.js: Clearing current response delivery for ${o.currentResponseToDeliver.conversationId} to allow fresh scanning.`),o.currentResponseToDeliver=null),o.isAttemptingDelivery=!1}console.log("WhatsApp Web ChatGPT Bridge content script loaded.");async function R(){const t=await chrome.runtime.sendMessage({action:"getSettings"});if(chrome.runtime.lastError){console.error("Content.js: Error getting settings for initial automation setup:",chrome.runtime.lastError.message);return}t&&t.isEnabled?P():console.log("Content.js: Initial settings indicate automation is disabled.")}R();chrome.storage.onChanged.addListener((t,n)=>{n==="sync"&&t.isEnabled!==void 0&&(console.log("Content.js: isEnabled setting changed to",t.isEnabled.newValue),t.isEnabled.newValue?P():$())});chrome.runtime.onMessage.addListener((t,n,e)=>{if(t.action==="settingsUpdated")return console.log("Content.js: Notified of settings update. Re-evaluating automation cycle."),chrome.runtime.sendMessage({action:"getSettings"},l=>{l!=null&&l.isPartialAutomation||(y(!0),console.log("Content.js: WhatsApp Web - Partial automation disabled, reset isPartialChecking to true")),$(),R()}),e({status:"Settings acknowledged by content script"}),!0;if(t.action!=="injectResponse"){if(t.action==="clearCurrentResponse")return console.log("Content.js: Received clearCurrentResponse request"),G(),e({status:"Current response cleared"}),!0}return console.log("Content.js: Received unhandled message action:",t.action),!1});
